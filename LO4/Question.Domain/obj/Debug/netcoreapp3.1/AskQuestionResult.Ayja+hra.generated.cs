// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CSharp.Choices;

namespace L04
{
    public static partial class AskQuestionResult
    {
        public static IAskQuestionResult Match(this IAskQuestionResult self, System.Func<QuestionAdded, IAskQuestionResult> whenQuestionAdded, System.Func<QuestionNotAdded, IAskQuestionResult> whenQuestionNotAdded, System.Func<QuestionValidationFailed, IAskQuestionResult> whenQuestionValidationFailed)
        {
            switch ((self))
            {
                case QuestionAdded questionadded:
                    return whenQuestionAdded(questionadded);
                case QuestionNotAdded questionnotadded:
                    return whenQuestionNotAdded(questionnotadded);
                case QuestionValidationFailed questionvalidationfailed:
                    return whenQuestionValidationFailed(questionvalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<IAskQuestionResult> MatchAsync(this IAskQuestionResult self, System.Func<QuestionAdded, System.Threading.Tasks.Task<IAskQuestionResult>> whenQuestionAdded, System.Func<QuestionNotAdded, System.Threading.Tasks.Task<IAskQuestionResult>> whenQuestionNotAdded, System.Func<QuestionValidationFailed, System.Threading.Tasks.Task<IAskQuestionResult>> whenQuestionValidationFailed)
        {
            switch ((self))
            {
                case QuestionAdded questionadded:
                    return await whenQuestionAdded(questionadded);
                case QuestionNotAdded questionnotadded:
                    return await whenQuestionNotAdded(questionnotadded);
                case QuestionValidationFailed questionvalidationfailed:
                    return await whenQuestionValidationFailed(questionvalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this IAskQuestionResult self, System.Func<QuestionAdded, R> whenQuestionAdded, System.Func<QuestionNotAdded, R> whenQuestionNotAdded, System.Func<QuestionValidationFailed, R> whenQuestionValidationFailed)
        {
            switch ((self))
            {
                case QuestionAdded questionadded:
                    return whenQuestionAdded(questionadded);
                case QuestionNotAdded questionnotadded:
                    return whenQuestionNotAdded(questionnotadded);
                case QuestionValidationFailed questionvalidationfailed:
                    return whenQuestionValidationFailed(questionvalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this IAskQuestionResult self, System.Func<QuestionAdded, System.Threading.Tasks.Task<R>> whenQuestionAdded, System.Func<QuestionNotAdded, System.Threading.Tasks.Task<R>> whenQuestionNotAdded, System.Func<QuestionValidationFailed, System.Threading.Tasks.Task<R>> whenQuestionValidationFailed)
        {
            switch ((self))
            {
                case QuestionAdded questionadded:
                    return await whenQuestionAdded(questionadded);
                case QuestionNotAdded questionnotadded:
                    return await whenQuestionNotAdded(questionnotadded);
                case QuestionValidationFailed questionvalidationfailed:
                    return await whenQuestionValidationFailed(questionvalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}